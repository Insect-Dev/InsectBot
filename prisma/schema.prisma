datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Test {
  id           String          @id @default(uuid())
  name         String
  description  String?
  status       String
  type         String? // Optional: type of test (bugfix, feature, etc.)
  priority     Int? // Optional: priority level of the test (e.g., 1 = high, 5 = low)
  startDate    DateTime        @default(now())
  endDate      DateTime?
  participants Participation[]
  TestResult   TestResult[]
}

model TestResult {
  testId          String
  feedbackSummary String?
  bugCount        Int?
  testedFeatures  String?

  test Test @relation(fields: [testId], references: [id])

  @@id([testId])
}

model Participation {
  userId       String
  testId       String
  score        Int // Score based on their performance or completion of tasks (if applicable)
  bugsReported Int // Number of bugs they reported
  feedback     String? // Individual feedback provided by the participant

  test        Test @relation(fields: [testId], references: [id])
  participant User @relation(fields: [userId], references: [id])

  @@id([userId, testId]) // Composite key to prevent duplicates
}

model User {
  id              String            @id @default(uuid())
  username        String
  totalScore      Int               @default(0) // Aggregated score across all tests
  participation   Participation[]
  UserAchievement UserAchievement[]
}

model AchievementType {
  id              String            @id @default(uuid())
  name            String // e.g., "Completed 5 tests", "Reported 10 bugs"
  description     String?
  points          Int
  UserAchievement UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  dateAwarded   DateTime @default(now())

  user        User            @relation(fields: [userId], references: [id])
  achievement AchievementType @relation(fields: [achievementId], references: [id])

  @@id([userId, achievementId]) // Composite key
}
